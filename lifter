#!/usr/bin/env perl

use lib 'lib';
use v5.10;
use strict;
use warnings;
use IPC::Open2;
use Lifter;

my $moves = '';
if($ARGV[0] && -f $ARGV[0]) {
  my $world = Lifter::load_world(shift @ARGV);
  while(1) {
    Lifter::print_map $world;
    say "Water level: $world->{water} Flooding: $world->{flooding_step}/$world->{flooding} Waterproof: $world->{waterproof_step}/$world->{waterproof}" if $world->{flooding};
    say "Beard growth: $world->{growth_step}/$world->{growth} razors $world->{razors}";
    say "Score: $world->{score}";
    print "Enter move: ";
    my $move = <>;
    chomp $move;
    $moves .= $move;
    $world = Lifter::eval_move($world, $move);
    $world = Lifter::check_ending($world);
    print_ending($world) if $world->{ending};
  }

} else {

  # Contest-mode
  my $world = Lifter::load_world(\*STDIN);
  my $botname = 'bot/genie.pl';
  # my $botname = 'bot/random.pl';
  my $output = '';

  open2(my $bot_out, my $bot_in, $botname) or die "Error opening bot: $!";

  local $SIG{INT} = sub { die };

  eval {

  while(1) {

    # Send the bot the world
    print $bot_in Lifter::world_to_json($world);
    print $bot_in "\n";

    # Get the next move from the bot
    my $move = <$bot_out>;
    chomp $move;
    $output .= $move;

    # So slow
    if($world->{ending}) {
      print "$output\n";
      exit;
    }
    # print "$output" . "A\n" && exit if eof $bot_out || $world->{ending};

    # Simulate the world
    $world = Lifter::eval_move( $world, $move);

    # Force-abort if needed
    if($world->{ending}) {
      print "$output\n";
      exit;
    }
  }

  };
  if($@) {
    $output .= <$bot_out>;
    print "$output\n";
    exit;
  }
}


sub print_ending {
  my $world = shift;
  say "Result: $world->{ending}!";
  say "Partial score: $world->{partial_score}";
  say "Bonus score: $world->{bonus_score}";
  say "Final score: $world->{score}";
  say "Moves:";
  say uc($moves);
  exit;
}


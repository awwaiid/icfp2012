#!/usr/bin/env perl

use v5.10;
use strict;
use warnings;
use lib 'lib';
use IPC::Open2;
use Getopt::Long;
use Data::Printer;

use Lifter;

my $botname;
my @maps;
my $verbose;
my $timeout;
my $warn_time;
my $flip_map;

my $result = GetOptions(
    'bot=s'     => \$botname,
    'verbose'   => \$verbose,
    'maps=s{,}' => \@maps,
    'time=s'    => \$timeout,
    'warn-time=i' => \$warn_time,
    'flip-map'  => \$flip_map,
);

$timeout ||= 10;
$warn_time ||= 10;

my $total_score = 0;
my %summary;

for my $mapname ( @maps ) {
    my $world = Lifter::load_world($mapname);
    #my $pid = open2(my $bot_out, my $bot_in, "$botname 2>err.txt")
    my $pid = open2(my $bot_out, my $bot_in, $botname)
      or die "Error opening bot: $!";

    eval {
      my $alarm = 0;
      local $SIG{ALRM} = sub {
        if(!$alarm) {
          kill 2, $pid;
          $alarm = 1;
          alarm $timeout;
        } else {
          $world->{score} = 0;
          die "TIMEOUT";
        }
      };
      local $SIG{INT} = sub { };
      alarm $warn_time; # timeout!

      MOVES: while(1) {
        if ( $verbose ) {
            Lifter::print_map $world;
        }
        print $bot_in Lifter::world_to_json($world, $flip_map);
        print $bot_in "\n";

        my $moves = <$bot_out>;
        $moves ||= 'A';
        chomp $moves;
        foreach my $move (split(//,$moves)) {
          $world = Lifter::robot_move($world, $move);
          $world = Lifter::check_ending($world);
          $world = Lifter::world_update($world);
          $world = Lifter::check_ending($world);
          print_ending($mapname, $world) && last MOVES if $world->{ending};
        }
      }
    };

    if($@) {
      $world->{ending} = 'TIME';
      print_ending($mapname, $world);
    }
}

say "\nSummary:\n";
for my $map ( sort keys %summary ) {
    say "\t$map: \t" . $summary{ $map };
}

say "\nTotal score: $total_score\n";

sub print_ending {
  my $map = shift;
  my $world = shift;
  say "World: $map";
  say "Result: $world->{ending}!";
  say "Partial score: $world->{partial_score}";
  say "Bonus score: $world->{bonus_score}";
  say "Final score: $world->{score}";
  print "\n";
  $total_score += $world->{score};
  $summary{$map} = "$world->{score}\t$world->{ending}";
  return 1;
}

